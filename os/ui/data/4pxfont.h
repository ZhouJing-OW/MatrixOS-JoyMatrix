#pragma once

const uint8_t font4[96][6] = {
    {2, 0b0000, 0b0000},                            // 32  = Space
    {2, 0b1101, 0b0000},                            // 33  = !
    {3, 0b1000, 0b0000, 0b1000},                    // 34  = "
    {5, 0b0110, 0b1111, 0b0110, 0b1111, 0b0110},    // 35  = #
    {4, 0b0101, 0b1111, 0b1111, 0b1010},            // 36  = $
    {4, 0b1001, 0b0010, 0b0100, 0b1001},            // 37  = %
    {4, 0b0111, 0b0101, 0b1111, 0b1101},            // 38  = &
    {2, 0b0100, 0b1000},                            // 39  = '
    {2, 0b0110, 0b1001},                            // 40  = (
    {2, 0b1001, 0b0110},                            // 41  = )
    {3, 0b1010, 0b0100, 0b1010},                    // 42  = *
    {3, 0b0010, 0b0111, 0b0010},                    // 43  = +
    {2, 0b0001, 0b0010},                            // 44  = ,
    {3, 0b0010, 0b0010, 0b0010},                    // 45  = -
    {2, 0b0001, 0b0000},                            // 46  = .
    {4, 0b0001, 0b0010, 0b0100, 0b1000},            // 47  = /
    {3, 0b1111, 0b1001, 0b1111},                    // 48  = 0
    {3, 0b1001, 0b1111, 0b0001},                    // 49  = 1
    {3, 0b1001, 0b1011, 0b1101},                    // 50  = 2
    {3, 0b1001, 0b1101, 0b1111},                    // 51  = 3
    {3, 0b0110, 0b0010, 0b1111},                    // 52  = 4
    {3, 0b1101, 0b1101, 0b1010},                    // 53  = 5
    {3, 0b1111, 0b0101, 0b0111},                    // 54  = 6
    {3, 0b1000, 0b1011, 0b1100},                    // 55  = 7
    {3, 0b1011, 0b1101, 0b1011},                    // 56  = 8
    {3, 0b1110, 0b1010, 0b1111},                    // 57  = 9
    {2, 0b0101, 0b0000},                            // 58  = :
    {2, 0b0001, 0b1010},                            // 59  = ;
    {2, 0b0010, 0b0101},                            // 60  = <
    {2, 0b0101, 0b0101},                            // 61  = =
    {2, 0b0101, 0b0010},                            // 62  = >
    {3, 0b1000, 0b1101, 0b1100},                    // 63  = ?
    {5, 0b0110, 0b1111, 0b1111, 0b1011, 0b0110},    // 64  = @
    {4, 0b0111, 0b1010, 0b1010, 0b0111},            // 65  = A
    {4, 0b1111, 0b1001, 0b1101, 0b1011},            // 66  = B
    {4, 0b0110, 0b1001, 0b1001, 0b1001},            // 67  = C
    {4, 0b1111, 0b1001, 0b1001, 0b0110},            // 68  = D
    {4, 0b1111, 0b1101, 0b1101, 0b1001},            // 69  = E
    {4, 0b1111, 0b1010, 0b1010, 0b1000},            // 70  = F
    {4, 0b0110, 0b1001, 0b1011, 0b1011},            // 71  = G
    {4, 0b1111, 0b0100, 0b0100, 0b1111},            // 72  = H
    {3, 0b1001, 0b1111, 0b1001},                    // 73  = I
    {4, 0b0010, 0b0001, 0b0001, 0b1110},            // 74  = J
    {4, 0b1111, 0b0100, 0b0110, 0b1001},            // 75  = K
    {4, 0b1111, 0b0001, 0b0001, 0b0001},            // 76  = L
    {5, 0b1111, 0b1000, 0b0111, 0b1000, 0b1111},    // 77  = M
    {4, 0b1111, 0b0100, 0b0010, 0b1111},            // 78  = N
    {4, 0b0110, 0b1001, 0b1001, 0b0110},            // 79  = O
    {4, 0b1111, 0b1010, 0b1010, 0b0100},            // 80  = P
    {5, 0b0110, 0b1001, 0b0110, 0b0111, 0b0001},    // 81  = Q
    {4, 0b1111, 0b1010, 0b1010, 0b0101},            // 82  = R
    {4, 0b0101, 0b1101, 0b1011, 0b1010},            // 83  = S
    {4, 0b1000, 0b1111, 0b1000, 0b1000},            // 84  = T
    {4, 0b1110, 0b0001, 0b0001, 0b1110},            // 85  = U
    {4, 0b1110, 0b0001, 0b0010, 0b1100},            // 86  = V
    {5, 0b1110, 0b0001, 0b0110, 0b0001, 0b1110},    // 87  = W
    {4, 0b1001, 0b0110, 0b0110, 0b1001},            // 88  = X
    {4, 0b1001, 0b0101, 0b0010, 0b1100},            // 89  = Y
    {4, 0b1001, 0b1011, 0b1101, 0b1001},            // 90  = Z
    {2, 0b1111, 0b1001},                            // 91  = [
    {4, 0b1000, 0b0100, 0b0010, 0b0001},            // 92  = Backslash
    {2, 0b1001, 0b1111},                            // 93  = ]
    {3, 0b0100, 0b1000, 0b0100},                    // 94  = ^
    {2, 0b0001, 0b0001},                            // 95  = _
    {2, 0b1000, 0b0100},                            // 96  = `
    {4, 0b0111, 0b1010, 0b1010, 0b0111},            // 65  = A
    {4, 0b1111, 0b1001, 0b1101, 0b1011},            // 66  = B
    {4, 0b0110, 0b1001, 0b1001, 0b1001},            // 67  = C
    {4, 0b1111, 0b1001, 0b1001, 0b0110},            // 68  = D
    {4, 0b1111, 0b1101, 0b1101, 0b1001},            // 69  = E
    {4, 0b1111, 0b1010, 0b1010, 0b1000},            // 70  = F
    {4, 0b0110, 0b1001, 0b1011, 0b1011},            // 71  = G
    {4, 0b1111, 0b0100, 0b0100, 0b1111},            // 72  = H
    {3, 0b1001, 0b1111, 0b1001},                    // 73  = I
    {4, 0b0010, 0b0001, 0b0001, 0b1110},            // 74  = J
    {4, 0b1111, 0b0100, 0b0110, 0b1001},            // 75  = K
    {4, 0b1111, 0b0001, 0b0001, 0b0001},            // 76  = L
    {5, 0b1111, 0b1000, 0b0111, 0b1000, 0b1111},    // 77  = M
    {4, 0b1111, 0b0100, 0b0010, 0b1111},            // 78  = N
    {4, 0b0110, 0b1001, 0b1001, 0b0110},            // 79  = O
    {4, 0b1111, 0b1010, 0b1010, 0b0100},            // 80  = P
    {5, 0b0110, 0b1001, 0b0110, 0b0111, 0b0001},    // 81  = Q
    {4, 0b1111, 0b1010, 0b1010, 0b0101},            // 82  = R
    {4, 0b0101, 0b1101, 0b1011, 0b1010},            // 83  = S
    {4, 0b1000, 0b1111, 0b1000, 0b1000},            // 84  = T
    {4, 0b1110, 0b0001, 0b0001, 0b1110},            // 85  = U
    {4, 0b1110, 0b0001, 0b0010, 0b1100},            // 86  = V
    {5, 0b1110, 0b0001, 0b0110, 0b0001, 0b1110},    // 87  = W
    {4, 0b1001, 0b0110, 0b0110, 0b1001},            // 88  = X
    {4, 0b1001, 0b0101, 0b0010, 0b1100},            // 89  = Y
    {4, 0b1001, 0b1011, 0b1101, 0b1001},            // 90  = Z
    {3, 0b0010, 0b1111, 0b1001},                    // 123 = {
    {2, 0b1111, 0b0000},                            // 124 = |
    {3, 0b1001, 0b1111, 0b0010},                    // 125 = }
    {3, 0b0110, 0b0100, 0b1100},                    // 126 = ~
    {4, 0b0111, 0b0101, 0b0101, 0b0010},            // 127 = DEL
};
